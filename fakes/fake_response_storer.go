// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"sync"

	"github.com/apoydence/bdd-talk"
)

type FakeResponseStorer struct {
	StoreStub        func(resp *http.Response, index int) error
	storeMutex       sync.RWMutex
	storeArgsForCall []struct {
		resp  *http.Response
		index int
	}
	storeReturns struct {
		result1 error
	}
}

func (fake *FakeResponseStorer) Store(resp *http.Response, index int) error {
	fake.storeMutex.Lock()
	fake.storeArgsForCall = append(fake.storeArgsForCall, struct {
		resp  *http.Response
		index int
	}{resp, index})
	fake.storeMutex.Unlock()
	if fake.StoreStub != nil {
		return fake.StoreStub(resp, index)
	} else {
		return fake.storeReturns.result1
	}
}

func (fake *FakeResponseStorer) StoreCallCount() int {
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	return len(fake.storeArgsForCall)
}

func (fake *FakeResponseStorer) StoreArgsForCall(i int) (*http.Response, int) {
	fake.storeMutex.RLock()
	defer fake.storeMutex.RUnlock()
	return fake.storeArgsForCall[i].resp, fake.storeArgsForCall[i].index
}

func (fake *FakeResponseStorer) StoreReturns(result1 error) {
	fake.StoreStub = nil
	fake.storeReturns = struct {
		result1 error
	}{result1}
}

var _ bdd_talk.ResponseStorer = new(FakeResponseStorer)
